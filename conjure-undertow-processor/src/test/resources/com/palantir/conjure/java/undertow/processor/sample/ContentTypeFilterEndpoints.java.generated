package com.palantir.conjure.java.undertow.processor.sample;

import com.google.common.collect.ImmutableList;
import com.palantir.conjure.java.undertow.annotations.DefaultSerDe;
import com.palantir.conjure.java.undertow.lib.Deserializer;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.TypeMarker;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.conjure.java.undertow.lib.UndertowService;
import com.palantir.conjure.java.undertow.runtime.ContentTypeFilterHandler;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;
import io.undertow.util.Methods;
import io.undertow.util.StatusCodes;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;

@Generated("com.palantir.conjure.java.undertow.processor.generate.ConjureUndertowEndpointsGenerator")
public final class ContentTypeFilterEndpoints implements UndertowService {
    private final ContentTypeFilter delegate;

    private ContentTypeFilterEndpoints(ContentTypeFilter delegate) {
        this.delegate = delegate;
    }

    public static UndertowService of(ContentTypeFilter delegate) {
        return new ContentTypeFilterEndpoints(delegate);
    }

    @Override
    public List<Endpoint> endpoints(UndertowRuntime runtime) {
        return ImmutableList.of(
                new ContentTypeEndpoint(runtime, delegate), new ContentTypesEndpoint(runtime, delegate));
    }

    private static final class ContentTypeEndpoint implements HttpHandler, Endpoint {
        private final UndertowRuntime runtime;

        private final ContentTypeFilter delegate;

        private final Deserializer<String> bodyDeserializer;

        ContentTypeEndpoint(UndertowRuntime runtime, ContentTypeFilter delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.bodyDeserializer = DefaultSerDe.INSTANCE.deserializer(new TypeMarker<String>() {}, runtime, this);
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws Exception {
            this.delegate.contentType(bodyDeserializer.deserialize(exchange));
            exchange.setStatusCode(StatusCodes.NO_CONTENT);
        }

        @Override
        public HttpString method() {
            return Methods.POST;
        }

        @Override
        public String template() {
            return "/contentTyp";
        }

        @Override
        public String serviceName() {
            return "ContentTypeFilter";
        }

        @Override
        public String name() {
            return "contentType";
        }

        @Override
        public HttpHandler handler() {
            return ContentTypeFilterHandler.of(Set.of("text/plain"), this);
        }
    }

    private static final class ContentTypesEndpoint implements HttpHandler, Endpoint {
        private final UndertowRuntime runtime;

        private final ContentTypeFilter delegate;

        private final Deserializer<String> bodyDeserializer;

        ContentTypesEndpoint(UndertowRuntime runtime, ContentTypeFilter delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.bodyDeserializer = DefaultSerDe.INSTANCE.deserializer(new TypeMarker<String>() {}, runtime, this);
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws Exception {
            this.delegate.contentTypes(bodyDeserializer.deserialize(exchange));
            exchange.setStatusCode(StatusCodes.NO_CONTENT);
        }

        @Override
        public HttpString method() {
            return Methods.POST;
        }

        @Override
        public String template() {
            return "/contentTyps";
        }

        @Override
        public String serviceName() {
            return "ContentTypeFilter";
        }

        @Override
        public String name() {
            return "contentTypes";
        }

        @Override
        public HttpHandler handler() {
            return ContentTypeFilterHandler.of(Set.of("text/plain", "text/html", "text/xml"), this);
        }
    }
}
